<templateSet group="Angular">
  <template name="a-guard-can-deactivate" value="import { Injectable } from '@angular/core';&#10;import { ActivatedRouteSnapshot, CanDeactivate, RouterStateSnapshot } from '@angular/router';&#10;import { Observable } from 'rxjs/Observable';&#10;&#10;import { $ComponentName$Component } from './$filename$.component';&#10;&#10;// Consider using this interface for all CanDeactivate guards,&#10;// and have your components implement this interface, too.&#10;//&#10;//   e.g. export class CanDeactivateGuard implements CanDeactivate&lt;CanComponentDeactivate&gt; {&#10;//&#10;// export interface CanComponentDeactivate {&#10;// canDeactivate: () =&gt; any;&#10;// }&#10;&#10;@Injectable()&#10;export class $Name$Guard implements CanDeactivate&lt;$ComponentName$Component&gt; {&#10; canDeactivate(&#10;  component: $ComponentName$Component,&#10;  currentRoute: ActivatedRouteSnapshot, &#10;  currentState: RouterStateSnapshot&#10; ): Observable&lt;boolean&gt;|Promise&lt;boolean&gt;|boolean {&#10;  return false;$END$&#10; }&#10;}" description="Angular CanDeactivate guard" toReformat="true" toShortenFQNames="true">
    <variable name="ComponentName" expression="" defaultValue="&quot;ComponentName&quot;" alwaysStopAt="true" />
    <variable name="filename" expression="lowercaseAndDash(ComponentName)" defaultValue="" alwaysStopAt="true" />
    <variable name="Name" expression="" defaultValue="&quot;Name&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-service-http" value="import { Injectable } from '@angular/core';&#10;import { Http, Response } from '@angular/http';&#10;import { Observable } from 'rxjs/Observable';&#10;import 'rxjs/add/operator/map';&#10;import 'rxjs/add/operator/catch';&#10;&#10;@Injectable()&#10;export class $ServiceName$Service {&#10; constructor(private http: Http) { }&#10; $END$&#10;}" description="Angular service with Http" toReformat="true" toShortenFQNames="true">
    <variable name="ServiceName" expression="" defaultValue="&quot;ServiceName&quot;" alwaysStopAt="true" />
  </template>
  <template name="a-http-interceptor" value="import { Injectable } from '@angular/core';&#10;import { HttpInterceptor, HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';&#10;import { Observable } from 'rxjs/Observable';&#10;&#10;@Injectable()&#10;export class HeaderInterceptor implements HttpInterceptor {&#10; intercept(req: HttpRequest&lt;any&gt;, next: HttpHandler): Observable&lt;HttpEvent&lt;any&gt;&gt; {&#10;  return next.handle(req);&#10; }&#10;}" description="Empty Angular HttpInterceptor for HttpClient" toReformat="true" toShortenFQNames="true">
    <context />
  </template>
  <template name="a-http-interceptor-headers" value="import { Injectable } from '@angular/core';&#10;import { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';&#10;import { Observable } from 'rxjs/Observable';&#10;&#10;@Injectable()&#10;export class HeaderInterceptor implements HttpInterceptor {&#10; constructor() {}&#10;&#10; intercept(req: HttpRequest&lt;any&gt;, next: HttpHandler): Observable&lt;HttpEvent&lt;any&gt;&gt; {&#10;  const headers = req.headers&#10;   .set('Content-Type', 'application/json');&#10;  const authReq = req.clone({ headers });&#10;  return next.handle(authReq);&#10; }&#10;}" description="Angular HttpInterceptor for headers HttpClient" toReformat="true" toShortenFQNames="true">
    <context />
  </template>
  <template name="a-http-interceptor-logging" value="import { HttpInterceptor, HttpHandler, HttpRequest, HttpEvent, HttpResponse } from '@angular/common/http';&#10;import { Observable } from 'rxjs/Observable';&#10;import { tap } from 'rxjs/operators';&#10;&#10;export class LogInterceptor implements HttpInterceptor {&#10; constructor() {}&#10;&#10; intercept(req: HttpRequest&lt;any&gt;, next: HttpHandler): Observable&lt;HttpEvent&lt;any&gt;&gt; {&#10;  const started = Date.now();&#10;  return next.handle(req).pipe(&#10;   tap(event =&gt; {&#10;    if (event instanceof HttpResponse) {&#10;     const elapsed = Date.now() - started;&#10;     console.log(`Request for \${req.urlWithParams} took \$elapsed$ ms.`);&#10;    }&#10;   })&#10;  );&#10; }&#10;}" description="Angular HttpInterceptor for Logging HttpClient" toReformat="true" toShortenFQNames="true">
    <variable name="elapsed" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-http-get" value="return this.http.get('$url$')&#10; .map((response: Response) =&gt; response.json());$END$" description="Angular Http.get" toReformat="true" toShortenFQNames="true">
    <variable name="url" expression="" defaultValue="&quot;url&quot;" alwaysStopAt="true" />
  </template>
  <template name="rx-add-observable" value="import 'rxjs/add/observable/$of$';&#10;$END$" description="RxJS Add Observable import" toReformat="true" toShortenFQNames="true">
    <variable name="of" expression="" defaultValue="&quot;of&quot;" alwaysStopAt="true" />
  </template>
  <template name="rx-add-operator" value="import 'rxjs/add/operator/$map$';&#10;$END$" description="RxJS Add Operator import" toReformat="true" toShortenFQNames="true">
    <variable name="map" expression="" defaultValue="&quot;map&quot;" alwaysStopAt="true" />
  </template>
  <template name="rx-behavior-subject" value="import { BehaviorSubject } from 'rxjs/BehaviorSubject';&#10;$END$" description="RxJS BehaviorSubject import" toReformat="true" toShortenFQNames="true" />
  <template name="rx-observable" value="import { Observable } from 'rxjs/Observable';&#10;$END$" description="RxJS Observable import" toReformat="true" toShortenFQNames="true" />
  <template name="rx-operators" value="import { $map$ } from 'rxjs/operators';&#10;$END$" description="RxJS Operators import" toReformat="true" toShortenFQNames="true">
    <variable name="map" expression="" defaultValue="&quot;map&quot;" alwaysStopAt="true" />
  </template>
  <template name="rx-replay-subject" value="import { ReplaySubject } from 'rxjs/ReplaySubject';&#10;$END$" description="RxJS ReplaySubject import" toReformat="true" toShortenFQNames="true" />
  <template name="rx-subject" value="import { Subject } from 'rxjs/Subject';&#10;$END$" description="RxJS Subject import" toReformat="true" toShortenFQNames="true" />
</templateSet>